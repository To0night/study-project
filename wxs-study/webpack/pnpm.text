## 什么是 pnpm

定义：快速的，节省磁盘的包管理工具（新一代包管理工具）

### pnpm 优势

1、节省磁盘空间
比如某公司中存在 10 个项目，那么在以往的开发流程上来说，node_modules（存放第三方插件的文件夹）会被创建 10 次（即使这 10 个项目使用的第三方插件完全相同）。在一个项目中 node_modules 文件夹往往是最占内存的。

有问题就会有优化空间 ----- pnpm 包管理工具为所有项目创建了一个共同的存储位置，且在第三方插件版本更新时也会动态的仅更新差异文件。

2、非扁平式的包管理工具
2.1 什么是非扁平？
在 npm 早期的版本中，项目所需要什么插件，node_modules 中层次式全盘安装。比如
<br><img src="./readmeImgs//%E6%97%A9%E6%9C%9F.png" width="300px"><br>
同样的 这样的嵌套结构会带来内存损耗问题，如果 a、b 模块依赖的模块中有相同文件
<br><img src="./readmeImgs/早期问题.png" width="300px"><br>
那么早期版本会一视同仁的全部安装。这样会造成非常严重的性能问题。问题2，这样的嵌套结构很可能出现文件路径过长的情况，但是windows系统的路径长度是有限制的...
于是在后期 npm 包管理版本中就出现了一直沿用至今的“平铺式”。
所谓的平铺式，是将所有依赖包以及依赖包的依赖包全部提升至 node_modules 的根目录下。
<br><img src="./readmeImgs/平铺.png" width="300px"><br>
这种解决方式会带来新的问题不过影响不大。
由于a、b模块的共同模块c被提升到node_modules的根目录下，也就是在平铺模式中处于和a、b同级的情况，那么在项目中就可以正确被引用即使并没有在package.json中预声明（幽灵依赖问题）。更多的是项目依赖结构不够直观问题。比如一个项目中只安装了一个第三方依赖a，但是往往打开node_modules文件夹中a的次级依赖，b、c、d、e、f...

对此pnpm提供的对此提出的解决方案是
image.png<br><img src="./readmeImgs/pnpm_1.png" width="300px"><br>
在pnpm管理工具中，node_modules只会出现两个文件模块a以及一个.pnpm文件夹。这个文件夹包含了依赖文件之间的链接关系，通过链接找到依赖的模块，很好的解决了模块之间的依赖问题。